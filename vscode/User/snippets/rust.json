{
  "My most common derive statement": {
    "prefix": "drve",
    "description": "The usual struct/enum derives recommended by C-Common-Traits + serde serialization",
    "body": [
      "#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Debug, Default, Serialize, Deserialize)]"
    ]
  },
  "log debug statement": {
    "prefix": "dbg",
    "description": "The quick and dirty Debug logging derived objects",
    "body": ["log::debug!(\"$1:\\n{:#?}\", $1);"]
  },
  "Subpar Rename": {
    "prefix": "spr",
    "description": "Rename derivation for subpar fields",
    "body": ["#[subpar(rename = \"$1\")]"]
  },
  "Serde Rename": {
    "prefix": "sre",
    "description": "Rename derivation for serde fields",
    "body": ["#[serde(rename = \"$1\")]"]
  },
  "Error From": {
    "prefix": "from error",
    "description": "Impl to convert from one type of error to another",
    "body": [
      "impl From<$1> for Error {",
      "  fn from(err: $1) -> Error {",
      "    Error::new(ErrorKind::$2, err.to_string())",
      "      .add_original_type(\"$1\".to_string())",
      "  }",
      "}"
    ]
  },
  "To String": {
    "prefix": "\".to",
    "description": "The usual .to_string()",
    "body": ["\".to_string()"]
  },
  "New Struct": {
    "prefix": "struct",
    "description": "Create a struct will all the standard derives",
    "body": [
      "#[derive(Clone, Debug, PartialEq, Eq, Default, Serialize, Deserialize)]",
      "pub struct $1 {}",
      "",
      "impl std::fmt::Display for $1 {",
      "    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {",
      "        write!(f, \"{:#?}\", self)",
      "    }",
      "}",
      "",
      "impl $1 {",
      "  /// Create a new instance",
      "  pub fn new() -> $1 {",
      "    unimplemented!(\"'$1::new' is not implemented yet\")",
      "  }",
      "}",
      ""
    ]
  },
  "New Enum": {
    "prefix": "enum",
    "description": "Create a new enumeration",
    "body": [
      "/// ",
      "#[derive(Clone, Eq, PartialEq, Debug, Serialize, Deserialize)]",
      "pub enum $1 {",
      "",
      "}",
      "",
      "impl Default for $1 {",
      "  fn default() -> $1 {",
      "    unimplemented!(\"Default is not implemented for $1\")",
      "  }",
      "}"
    ]
  },
  "New Function": {
    "prefix": "fn ",
    "description": "Create an unimplemented function",
    "body": [
      "/// $1",
      "pub fn $1($2) -> Result<$3> {",
      "    unimplemented!(\"'$1' is not implemented yet\")",
      "}",
      ""
    ]
  },

  "Unimplemented": {
    "prefix": "unimp",
    "description": "Add an unimplemented command with a better print statement",
    "body": "unimplemented!(\"'$1' still needs to be implemented\")"
  },

  "Header": {
    "prefix": "header",
    "description": "My Common header with imports",
    "body": [
      "//! $2",
      "//!",
      "//! $3",
      "",
      "use anyhow::{Context, Result}",
      "use serde::{Deserialize, Serialize}",
      "",
      "use super::$1Error",
      ""
    ]
  },

  //----  Yew Based snippets
  "New Yew Component": {
    "prefix": "ycmp",
    "description": "Create a new Yew Component",
    "body": [
      "#[derive(Clone, Debug)]",
      "pub enum $1Msg {}",
      "",
      "#[derive(Properties, Clone, Debug, PartialEq)]",
      "pub struct $1Props {",
      "  /// Unique Identifier for $1",
      "  #[prop_or_default]",
      "  pub id: String,",
      "",
      "  /// CSS Classes used for rendering",
      "  #[prop_or_default]",
      "  pub class: Classes,",
      "",
      "  /// Child components",
      "  #[prop_or_default]",
      "  pub children: Children,",
      "}",
      "",
      "/// $1",
      "#[derive(Debug)]",
      "pub struct $1 {}",
      "",
      "impl Component for $1 {",
      "  type Message = $1Msg;",
      "  type Properties = $1Props;",
      "",
      "  fn create(_ctx: &Context<$1>) -> Self {",
      "    $1 {}",
      "  }",
      "",
      "  fn view(&self, _ctx: &Context<$1>) -> Html {",
      "    console_log!(\"Rendering view for $1\");",
      "    html! {",
      "      <div class={classes!()}>",
      "        {\"$1: view has not been implemented\"}",
      "      </div>",
      "    }",
      "  }",
      "}"
    ]
  },
  "yew cls classes macro": {
    "prefix": "classes",
    "description": "The classes macro",
    "body": "class={classes!(\"$1\")}"
  },
  "impl Display": {
    "prefix": "display",
    "description": "Implement the disply function, defaults to using Self::debug",
    "body": [
      "impl Display for $1 {",
      "  fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {",
      "     write!(f, \"{:?}\", self)",
      "  }",
      "}"
    ]
  },
  "impl Default": {
    "prefix": "default",
    "description": "Implement default for the current object",
    "body": ["impl Default for $1 {", "  fn default() -> $1 {", "    $1 {}", "  }", "}"]
  },
  "Tailwind Style Class": {
    "prefix": "tw!",
    "description": "Simple tailwind macro shortcut",
    "body": "class={tw!(\"$1\")}"
  },
  "NomNomicon Grammar Item": {
    "prefix": "nom-token",
    "description": "Add a token item for a NomNomicon grammar",
    "body": [
      "/// $1",
      "struct $1 {}",
      "",
      "impl $1 {",
      "  pub fn get() -> Item {",
      "    todo!(\"NomNomicon $1::get\")",
      "  }",
      "}"
    ]
  },
  "Rust Macro Struct (from syn, to_tokens)": {
    "prefix": "ast_rust",
    "description": "Template for writing a macro parser",
    "body": [
      "pub struct $1 {",
      "  $3",
      "}",
      "",
      "impl $1 {",
      "  pub fn from_syn(node: &$2) -> Result<$1> {",
      "    info!(\"Getting $1\");",
      "    debug!(\"{:?}\", quote!(node));",
      "    todo!(\"$1::from_syn\")",
      "  }",
      "}",
      "",
      "impl ToTokens for $1 {",
      "  fn to_tokens(&self, tokens: &mut TokenStream) {",
      "    todo!(\"$1 cannot be converted to tokens yet\");",
      "}"
    ]
  }
}
