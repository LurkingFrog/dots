{
  "My most common derive statement": {
    "prefix": "drve",
    "description": "The usual struct/enum derives recommended by C-Common-Traits + serde serialization",
    "body": [
      "#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Display, Default, Serialize, Deserialize)]"
    ]
  },
  "log debug statement": {
    "prefix": "dbg",
    "description": "The quick and dirty Debug logging derived objects",
    "body": ["log::debug!(\"$1:\\n{:#?}\", $1);"]
  },
  "Subpar Rename": {
    "prefix": "spr",
    "description": "Rename derivation for subpar fields",
    "body": ["#[subpar(rename = \"$1\")]"]
  },
  "Serde Rename": {
    "prefix": "sre",
    "description": "Rename derivation for serde fields",
    "body": ["#[serde(rename = \"$1\")]"]
  },
  "Error From": {
    "prefix": "from error",
    "description": "Impl to convert from one type of error to another",
    "body": [
      "impl From<$1> for Error {",
      "  fn from(err: $1) -> Error {",
      "    Error::new(ErrorKind::$2, err.to_string())",
      "      .add_original_type(\"$1\".to_string())",
      "  }",
      "}"
    ]
  },
  "To String": {
    "prefix": "\".to",
    "description": "The usual .to_string()",
    "body": ["\".to_string()"]
  },
  "New Struct": {
    "prefix": "struct",
    "description": "Create a struct will all the standard derives",
    "body": [
      "#[derive(",
      "    Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default, Serialize, Deserialize,",
      ")]",
      "pub struct $1 {}",
      "",
      "impl std::fmt::Display for $1 {",
      "    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {",
      "        write!(f, \"{:#?}\", self)",
      "    }",
      "}",
      "",
      "impl $1 {}",
      ""
    ]
  },
  "New Enum": {
    "prefix": "enum",
    "description": "Create a new enumeration",
    "body": [
      "/// ",
      "#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Serialize, Deserialize)]",
      "pub enum $1 {",
      "",
      "}",
      "",
      "impl Default for $1 {",
      "  fn default() -> $1 {",
      "    unimplemented!(\"Default is not implemented for $1\")",
      "  }",
      "}"
    ]
  },
  "New Function": {
    "prefix": "fn ",
    "description": "Create an unimplemented function",
    "body": ["fn $1($2) -> Result<$3> {", "    unimplemented!(\"'$1' is not implemented yet\")", "}", ""]
  },
  "Unimplemented": {
    "prefix": "unimp",
    "description": "Add an unimplemented command with a better print statement",
    "body": "unimplemented!(\"'$1' still needs to be implemented\")"
  },
  "Header": {
    "prefix": "header",
    "description": "My Common header with imports",
    "body": [
      "//! $2",
      "//!",
      "//! $3",
      "",
      "use anyhow::{Context, Result}",
      "use serde::{Deserialize, Serialize}",
      "",
      "use super::$1Error",
      ""
    ]
  }
}
