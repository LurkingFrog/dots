user       www-data www-data;  ## Default: nobody
worker_processes  5;  ## Default: 1
error_log  /var/log/nginx/error.log;
pid        /var/run/nginx.pid;
worker_rlimit_nofile 8192;


# To add a new ssl cert on a domain:
# https://certbot.eff.org/lets-encrypt/ubuntufocal-nginx
# sudo certbot run --nginx -n --agree-tos -m dfogelson@landfillinc.com --domains <NEW_DOMAIN>.landfillinc.com

events {
  worker_connections  4096;  ## Default: 1024
}

http {
  default_type application/octet-stream;
  log_format   main '$remote_addr - $remote_user [$time_local]  $status '
    '"$request" $body_bytes_sent "$http_referer" '
    '"$http_user_agent" "$http_x_forwarded_for"';
  access_log   /var/log/nginx/access.log  main;
  sendfile     on;
  tcp_nopush   on;
  server_names_hash_bucket_size 128; # this seems to be required for some vhosts

  # Fishhead Labs - Main Invoicing site
  server {
    server_name  fhl.landfillinc.com;
    access_log   /var/log/nginx/fhl.access.log  main;

    listen 443 ssl; # managed by Certbot
    ssl_certificate /etc/letsencrypt/live/fhl.landfillinc.com/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/fhl.landfillinc.com/privkey.pem; # managed by Certbot
    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot

    # ------  Begin Vouch OAUTH2 protection
    # https://github.com/vouch/vouch-proxy#installation-and-configuration
    # send all requests to the `/validate` endpoint for authorization
    auth_request /validate;

    location = /validate {
      # forward the /validate request to Vouch Proxy
      proxy_pass http://127.0.0.1:9090/validate;
      # be sure to pass the original host header
      proxy_set_header Host $http_host;

      # Vouch Proxy only acts on the request headers
      proxy_pass_request_body off;
      proxy_set_header Content-Length "";

      # optionally add X-Vouch-User as returned by Vouch Proxy along with the request
      auth_request_set $auth_resp_x_vouch_user $upstream_http_x_vouch_user;


      # these return values are used by the @error401 call
      auth_request_set $auth_resp_jwt $upstream_http_x_vouch_jwt;
      auth_request_set $auth_resp_err $upstream_http_x_vouch_err;
      auth_request_set $auth_resp_failcount $upstream_http_x_vouch_failcount;
    }

    # if validate returns `401 not authorized` then forward the request to the error401block
    error_page 401 = @error401;

    location @error401 {
        # redirect to Vouch Proxy for login
        return 302 https://vouch.landfillinc.com/login?url=$scheme://$http_host$request_uri&vouch-failcount=$auth_resp_failcount&X-Vouch-Token=$auth_resp_jwt&error=$auth_resp_err;
        # you usually *want* to redirect to Vouch running behind the same Nginx config proteced by https
        # but to get started you can just forward the end user to the port that vouch is running on
        # return 302 http://vouch.yourdomain.com:9090/login?url=$scheme://$http_host$request_uri&vouch-failcount=$auth_resp_failcount&X-Vouch-Token=$auth_resp_jwt&error=$auth_resp_err;
    }
    # ------  End Vouch OAUTH2 protection


    location ~ /graphql {
      proxy_pass   http://127.0.0.1:3000;
    }

    location ~ / {
      proxy_pass   http://127.0.0.1:3001;
    }
  }

  # Openly exposed development server
  server {
    server_name  dev.landfillinc.com;
    access_log   /var/log/nginx/dev.access.log  main;

    location ~ /graphql {
      proxy_pass   http://127.0.0.1:9081;
    }

    location ~ / {
      proxy_pass   http://127.0.0.1:9080;
    }

    listen 443 ssl; # managed by Certbot
    ssl_certificate /etc/letsencrypt/live/dev.landfillinc.com/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/dev.landfillinc.com/privkey.pem; # managed by Certbot
    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot
  }

  # vouch - An oauth2 proxy for protecting all of the sites that do not have security of their own
  server {
    server_name  vouch.landfillinc.com;
    access_log   /var/log/nginx/vouch.access.log  main;

    location / {
      proxy_pass http://127.0.0.1:9090;
      # be sure to pass the original host header
      proxy_set_header Host $http_host;
    }

    listen 443 ssl; # managed by Certbot
    ssl_certificate /etc/letsencrypt/live/vouch.landfillinc.com/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/vouch.landfillinc.com/privkey.pem; # managed by Certbot
    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot
  }

  # An instance of OpenProject for managing my ADHD
  server {
    server_name  adhd.landfillinc.com;
    access_log   /var/log/nginx/vouch.access.log  main;

    location / {
      proxy_pass http://127.0.0.1:9021;
      # be sure to pass the original host header
      proxy_set_header Host $http_host;
    }


    listen 443 ssl; # managed by Certbot
    ssl_certificate /etc/letsencrypt/live/adhd.landfillinc.com/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/adhd.landfillinc.com/privkey.pem; # managed by Certbot
    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot
  }

  server {
    server_name  books.landfillinc.com;
    access_log   /var/log/nginx/books.access.log  main;

    # ------  Begin Vouch OAUTH2 protection
    # https://github.com/vouch/vouch-proxy#installation-and-configuration
    # send all requests to the `/validate` endpoint for authorization
    auth_request /validate;

    location = /validate {
      # forward the /validate request to Vouch Proxy
      proxy_pass http://127.0.0.1:9090/validate;
      # be sure to pass the original host header
      proxy_set_header Host $http_host;

      # Vouch Proxy only acts on the request headers
      proxy_pass_request_body off;
      proxy_set_header Content-Length "";

      # optionally add X-Vouch-User as returned by Vouch Proxy along with the request
      auth_request_set $auth_resp_x_vouch_user $upstream_http_x_vouch_user;


      # these return values are used by the @error401 call
      auth_request_set $auth_resp_jwt $upstream_http_x_vouch_jwt;
      auth_request_set $auth_resp_err $upstream_http_x_vouch_err;
      auth_request_set $auth_resp_failcount $upstream_http_x_vouch_failcount;
    }

    # if validate returns `401 not authorized` then forward the request to the error401block
    error_page 401 = @error401;

    location @error401 {
        # redirect to Vouch Proxy for login
        return 302 https://vouch.landfillinc.com/login?url=$scheme://$http_host$request_uri&vouch-failcount=$auth_resp_failcount&X-Vouch-Token=$auth_resp_jwt&error=$auth_resp_err;
        # you usually *want* to redirect to Vouch running behind the same Nginx config proteced by https
        # but to get started you can just forward the end user to the port that vouch is running on
        # return 302 http://vouch.yourdomain.com:9090/login?url=$scheme://$http_host$request_uri&vouch-failcount=$auth_resp_failcount&X-Vouch-Token=$auth_resp_jwt&error=$auth_resp_err;
    }
    # ------  End Vouch OAUTH2 protection

    location ~ / {
      proxy_pass   http://192.168.4.42:8080;
    }


    listen 443 ssl; # managed by Certbot
    ssl_certificate /etc/letsencrypt/live/books.landfillinc.com/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/books.landfillinc.com/privkey.pem; # managed by Certbot
    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot

}

  # Redirect tpf to https
  server {
    if ($host = fhl.landfillinc.com) {
        return 301 https://$host$request_uri;
    } # managed by Certbot


    server_name  fhl.landfillinc.com;

    listen 80;
    return 404; # managed by certbot
  }

  # Redirect tpf to https
  server {
    if ($host = dev.landfillinc.com) {
        return 301 https://$host$request_uri;
    } # managed by Certbot

    server_name  dev.landfillinc.com;

    listen 80;
    return 404; # managed by certbot
  }


  # Redirect tpf to https
  server {
    if ($host = tpf.landfillinc.com) {
        return 301 https://$host$request_uri;
    } # managed by Certbot


    server_name  tpf.landfillinc.com;

    listen 80;
    return 404; # managed by certbot
  }

  server {
    if ($host = books.landfillinc.com) {
        return 301 https://$host$request_uri;
    } # managed by Certbot


    server_name  books.landfillinc.com;
    listen 80;
    return 404; # managed by Certbot


  }

  server {
    if ($host = adhd.landfillinc.com) {
        return 301 https://$host$request_uri;
    } # managed by Certbot


    server_name  adhd.landfillinc.com;
    listen 80;
    return 404; # managed by Certbot
}}